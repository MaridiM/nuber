type Chat {
  id: Int!
  messages: [Message]!
  passenger: [User]!
  driver: [User]!
  passengerId: Int!
  driverId: Int
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  user: User!
  createdAt: String!
  updateAt: String
}

type AddPlaceResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  AddPlace(name: String!, lat: Float!, lng: Float!, address: String!, isFav: Boolean!): AddPlaceResponse!
  DeletePlace(placeID: Int!): DeletePlaceResponse!
  EditPlace(id: Int!, name: String, isFav: Boolean): EditPlaceResponse!
  GetMyPlaces: GetMyPlacesResponse!
  RequestRide(pickUpAddress: String!, pickUpLat: Float!, pickUpLng: Float!, dropOffAddress: String!, dropOffLat: Float!, dropOffLng: Float!, price: Float!, distance: String!, duration: String!): RequestRideResponse!
  UpdateRideStatus(rideId: Int!, status: StatusOptions!): UpdateRideStatusResponse!
  CompleteEmailVerification(key: String!): CompleteEmailVerificationResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(firstName: String!, lastName: String!, email: String!, password: String!, profilePhoto: String!, phoneNumber: String!, age: Int!): EmailSignUpResponse!
  FacebookConnect(firstName: String!, lastName: String!, email: String!, facebookID: String!): FacebookConnectResponse!
  GetNearbyDrivers: GetNearbyDriversResponse!
  ReportMovement(lastOrientation: Float, lastLat: Float, lastLng: Float): ReportMovementResponse!
  RequestEmailVerification: RequestEmailVerificationResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
  ToggleDrivingMode: ToggleDrivingModeResponse!
  UpdateMyProfile(firstName: String, lastName: String, email: String, password: String, age: String, profilePhoto: String): UpdateMyProfileResponse
}

type DeletePlaceResponse {
  ok: Boolean!
  error: String
}

type EditPlaceResponse {
  ok: Boolean!
  error: String
}

type GetMyPlacesResponse {
  ok: Boolean!
  error: String
  places: [Place]
}

type Place {
  id: Int!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  isFav: Boolean!
  userId: Int!
  user: User!
  createdAt: String!
  updatedAt: String
}

type GetNearbyRideResponse {
  ok: Boolean!
  error: String
  ride: Ride
}

type Query {
  GetNearbyRide: GetNearbyRideResponse!
  GetRide(rideId: Int!): GetRideResponse!
  GetMyProfile: GetMyProfileResponse!
}

type GetRideResponse {
  ok: Boolean!
  error: String
  ride: Ride
}

type Subscription {
  NearbyRideDescription: Ride
  RideStatusSubscription: Ride
  DriversSubscription: User
}

type RequestRideResponse {
  ok: Boolean!
  error: String
  ride: Ride
}

type Ride {
  id: Int!
  status: String!
  pickUpAddress: String!
  pickUpLat: Float!
  pickUpLng: Float!
  dropOffAddress: String!
  dropOffLat: Float!
  dropOffLng: Float!
  price: Float!
  distance: String!
  duration: String!
  driver: User!
  driverId: Int
  passenger: User!
  passengerId: Int!
  createdAt: String!
  updatedAt: String
}

type UpdateRideStatusResponse {
  ok: Boolean!
  error: String
}

enum StatusOptions {
  ACCEPTED
  FINISHED
  CANCELED
  REQUESTING
  ONROUTE
}

type CompleteEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type GetNearbyDriversResponse {
  ok: Boolean!
  error: String
  drivers: [User]
}

type ReportMovementResponse {
  ok: Boolean!
  error: String
}

type RequestEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  email: String
  verifiedEmail: Boolean!
  firstName: String!
  lastName: String!
  age: Int
  password: String
  phoneNumber: String
  verifiedPhoneNumber: Boolean!
  profilePhoto: String
  fullName: String
  isDriving: Boolean!
  isRiding: Boolean!
  isTaken: Boolean!
  lastLng: Float
  lastLat: Float
  lastOrientation: Float
  facebookID: String
  messages: [Message]
  ridesAsPassenger: [Ride]
  ridesAsDriver: [Ride]
  chatAsPassenger: [Chat]
  chatAsDriver: [Chat]
  places: [Place]
  createdAt: String!
  updatedAt: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type ToggleDrivingModeResponse {
  ok: Boolean!
  error: String
}

type UpdateMyProfileResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean
  createdAt: String!
  updatedAt: String!
}
